@model FoodDeliveryWebApplication.Models.BaseEntity

@{
    ViewBag.Title = "ResetPassword";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
}



<section style="padding-top: 10em">

    <div class="container">
        <div class="card mx-auto  col-md-6 col-12 bg-light mt-5 shadow ">
            <div class="card-body ">
                <h2 class="text-center">Reset Password</h2>
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

            <div class="form-horizontal">

                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.EmailId, htmlAttributes: new { @class = "control-label col-md-12",  })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control", @id = "EmailId" } })
                        @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group" style="display:none" id="txtOtp">
                    @Html.Label("One time password", htmlAttributes: new { @class = "control-label col-md-12", })
                    <div class="col-md-12">
                        @Html.Editor("Otp", new { htmlAttributes = new { @class = "form-control", @id = "textOtp" } })
                        @Html.ValidationMessage("Otp", "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" style="display:none" id="txtPswd">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", id="pswd" } })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" style="display:none" id="txtCPswd">
                    @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control",id="cpswd" } })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row form-group text-center mb-3 mt-5">
                    <div class="mx-auto">
                        <input type="button" id="btnSubmit" value="Reset" class="btn btn-success" />
                        <input type="button" value="Cancel" id="Clear" class="btn btn-danger" onclick="location.href='@Url.Action("Login", "Login")'" />
                    </div>

                </div>
            </div>
                }
            </div>
        </div>
    </div>
</section>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/CreatedScripts/NavIconHide.js"></script>
<script>
    $(document).ready(function () {
        $("#EmailId").blur(function () {
            var email = $("#EmailId").val();
            $.ajax({
                method: "POST",
                url: "/Login/IsExistEmail/",
                data: { "emailId": email },
                success: function (result) {
                    if (result == "Not found") {
                        alert("This email has not registered. Please register first!");

                    }
                    else if (result == "Found") {
                        alert("A otp has been send to your email");
                        $("#txtOtp").show();

                    }
                },
                error: function (err) {
                    alert(err);
                }

                
            })
        })
    })

    $("#textOtp").blur(function () {
        var otp = $("#textOtp").val();
        $.ajax({
            method: "POST",
            url: "/Login/OtpMatchCheck/",
            data: { "otp": otp },
            success: function (result) {
                if (result == "Matched") {
                    $("#txtPswd").show();
                    $("#txtCPswd").show();
                    

                }
                else if (result == "Not Matched") {
                    alert("Inavlid Otp");
                    

                }
            },
            error: function (err) {
                alert(err);
            }


        })

    })

    $("#btnSubmit").click(function () {
        var pswd = $("#pswd").val();
        var cpswd = $("#cpswd").val();
        var emailId = $("#EmailId").val();
        if (pswd == "" || cpswd == "" || emailId == "") {
            alert("Please fill all the fields");
        }
        var obj = { "EmailId": emailId, "Password": pswd, "ConfirmPassword": cpswd };
        $.ajax({
            method: "POST",
            url: "/Login/ResetPassword/",
            data: { "obj": obj },
            success: function (result) {
                if (result == "Success") {
                    alert(result);
                    location.reload();
                }
                else {
                    alert(result);
                }
            },
            error: function (err) {
                alert(err);
            }
        })
    })
</script>


